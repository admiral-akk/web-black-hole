(()=>{"use strict";var t="undefined"!=typeof Float32Array?Float32Array:Array;function a(){var a=new t(3);return t!=Float32Array&&(a[0]=0,a[1]=0,a[2]=0),a}function r(a){var r=new t(3);return r[0]=a[0],r[1]=a[1],r[2]=a[2],r}function s(t){var a=t[0],r=t[1],s=t[2];return Math.hypot(a,r,s)}function n(t,a,r){return t[0]=a[0]*r,t[1]=a[1]*r,t[2]=a[2]*r,t}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,a=arguments.length;a--;)t+=arguments[a]*arguments[a];return Math.sqrt(t)});var o;function i(t){return n(t,t,1/s(t)),function(t){if(Math.abs(1-s(t))>1e-6)throw console.log(`length: ${s(t)}`),new Error(`The vector: ${t} is not normalized`)}(t),t}function h(){return i([1,0,0])}a();class c{constructor(t=[0,0,0],a=h()){this.pos=t,this.dir=a}}class e{constructor(t=120,a=[0,0,0],r=h()){this.focalAngleRad=Math.PI*t/180,this.pos=a,this.dir=r}viewportToRay(t){const a=(t[0]-.5)*this.focalAngleRad/2,s=r(this.dir);var n,o,h,e,u,l;return n=s,h=[0,0,0],e=-a,l=[],(u=[])[0]=(o=s)[0]-h[0],u[1]=o[1]-h[1],u[2]=o[2]-h[2],l[0]=u[2]*Math.sin(e)+u[0]*Math.cos(e),l[1]=u[1],l[2]=u[2]*Math.cos(e)-u[0]*Math.sin(e),n[0]=l[0]+h[0],n[1]=l[1]+h[1],n[2]=l[2]+h[2],function(t,a,r,s){var n=[],o=[];n[0]=a[0]-r[0],n[1]=a[1]-r[1],n[2]=a[2]-r[2],o[0]=n[0]*Math.cos(s)-n[1]*Math.sin(s),o[1]=n[0]*Math.sin(s)+n[1]*Math.cos(s),o[2]=n[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2]}(s,s,[0,0,0],-(t[1]-.5)*this.focalAngleRad/2),new c(r(this.pos),i(s))}}class u{constructor(t=[0,0,0],r=1){this.pos=t,this.rad=r,this.temp=a()}distance(t){return a=t,r=this.pos,s=r[0]-a[0],n=r[1]-a[1],o=r[2]-a[2],Math.hypot(s,n,o)-this.rad;var a,r,s,n,o}normal(t){return r((a=this.temp,s=t,n=this.pos,a[0]=s[0]-n[0],a[1]=s[1]-n[1],a[2]=s[2]-n[2],a));var a,s,n}}function l(t){return t<0?0:t>255?255:t}function d(a){const r=(s=a,(n=new t(4))[0]=s[0],n[1]=s[1],n[2]=s[2],n[3]=s[3],n);var s,n;for(let t=0;t<4;t++)r[t]=l(r[t]);return function(t){if(t.filter((t=>t<0||t>255)).length>0)throw new Error(`The color: ${t} has out of bounds values!`)}(r),r}o=new t(4),t!=Float32Array&&(o[0]=0,o[1]=0,o[2]=0,o[3]=0);class f{constructor(t=.01,a=10){this.rayCollisionDistance=t,this.sdf=new u([1,0,0],.4),this.maxDistance=a}castRay(t){let a=[0,0,0],r=0;for(;r<this.maxDistance;){const h=this.sdf.distance(t.pos);if(h<this.rayCollisionDistance)return d([255,255,255,255]);a=n(a,t.dir,h),t.pos=(s=t.pos,o=t.pos,i=a,s[0]=o[0]+i[0],s[1]=o[1]+i[1],s[2]=o[2]+i[2],s),r+=h}var s,o,i;return this.backgroundColor(t.dir)}backgroundColor(t){return d([500*t[2],500*t[1],0,255])}}(new class{constructor(){const t=document.getElementById("gpu-canvas");this.ctx=t.getContext("2d"),this.ctx.canvas.width=400,this.ctx.canvas.height=400,this.camera=new e,this.raycaster=new f}Render(){const t=this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height),a=t.data;for(let t=0;t<a.length;t+=4){const r=Math.floor(Math.floor(t/4)%this.ctx.canvas.width),s=Math.floor(Math.floor(t/4)/this.ctx.canvas.width),n=[r/this.ctx.canvas.width,s/this.ctx.canvas.height],o=this.camera.viewportToRay(n);[a[t],a[t+1],a[t+2],a[t+3]]=this.raycaster.castRay(o)}this.ctx.putImageData(t,0,0)}}).Render()})();