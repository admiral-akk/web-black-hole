(()=>{"use strict";var t,n="undefined"!=typeof Float32Array?Float32Array:Array;function a(t){var n=t[0],a=t[1],r=t[2];return Math.hypot(n,a,r)}function r(t,n,a){return t[0]=n[0]+a[0],t[1]=n[1]+a[1],t[2]=n[2]+a[2],t}function s(t,n,a){return t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a,t}function o(t){return s(t,t,1/a(t)),function(t){if(Math.abs(1-a(t))>1e-6)throw console.log(`length: ${a(t)}`),new Error(`The vector: ${t} is not normalized`)}(t),t}function i(){return o([1,0,0])}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,n=arguments.length;n--;)t+=arguments[n]*arguments[n];return Math.sqrt(t)}),t=new n(3),n!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0);class e{constructor(t=[0,0,0],n=i()){this.pos=t,this.dir=n}}class c{constructor(t=120,n=[0,0,0],a=i()){this.focalAngleRad=Math.PI*t/180,this.pos=n,this.dir=a}viewportToRay(t){const a=(t[0]-.5)*this.focalAngleRad/2,r=function(t){var a=new n(3);return a[0]=t[0],a[1]=t[1],a[2]=t[2],a}(this.dir);return function(t,n,a,r){var s=[],o=[];s[0]=n[0]-a[0],s[1]=n[1]-a[1],s[2]=n[2]-a[2],o[0]=s[2]*Math.sin(r)+s[0]*Math.cos(r),o[1]=s[1],o[2]=s[2]*Math.cos(r)-s[0]*Math.sin(r),t[0]=o[0]+a[0],t[1]=o[1]+a[1],t[2]=o[2]+a[2]}(r,r,[0,0,0],-a),function(t,n,a,r){var s=[],o=[];s[0]=n[0]-a[0],s[1]=n[1]-a[1],s[2]=n[2]-a[2],o[0]=s[0]*Math.cos(r)-s[1]*Math.sin(r),o[1]=s[0]*Math.sin(r)+s[1]*Math.cos(r),o[2]=s[2],t[0]=o[0]+a[0],t[1]=o[1]+a[1],t[2]=o[2]+a[2]}(r,r,[0,0,0],-(t[1]-.5)*this.focalAngleRad/2),new e(this.pos,o(r))}}class h{constructor(){this.spherePos=[1,0,0],this.sphereRadius=1}Distance(t){return 1}}function u(t){return t<0?0:t>255?255:t}function l(t){const a=function(t){var a=new n(4);return a[0]=t[0],a[1]=t[1],a[2]=t[2],a[3]=t[3],a}(t);for(let t=0;t<4;t++)a[t]=u(a[t]);return function(t){if(t.filter((t=>t<0||t>255)).length>0)throw new Error(`The color: ${t} has out of bounds values!`)}(a),a}!function(){var t=new n(4);n!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0)}();class f{constructor(t=1e-6,n=10){this.rayCollisionDistance=t,this.sdf=new h,this.maxSteps=n}castRay(t){let n=[0,0,0];for(let a=0;a<this.maxSteps;a++){const a=this.sdf.Distance(t.pos);if(a<this.rayCollisionDistance)return l([255,255,255,255]);s(n,t.dir,a),r(t.pos,t.pos,n)}return this.backgroundColor(t.dir)}backgroundColor(t){return l([500*t[2],500*t[1],0,255])}}(new class{constructor(){const t=document.getElementById("gpu-canvas");this.ctx=t.getContext("2d"),this.ctx.canvas.width=400,this.ctx.canvas.height=400,this.camera=new c,this.raycaster=new f}Render(){const t=this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height),n=t.data;for(let t=0;t<n.length;t+=4){const a=Math.floor(Math.floor(t/4)%this.ctx.canvas.width),r=Math.floor(Math.floor(t/4)/this.ctx.canvas.width),s=[a/this.ctx.canvas.width,r/this.ctx.canvas.height],o=this.camera.viewportToRay(s);[n[t],n[t+1],n[t+2],n[t+3]]=this.raycaster.castRay(o)}this.ctx.putImageData(t,0,0)}}).Render()})();